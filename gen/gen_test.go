package gen

import (
	"bytes"
	"strings"
	"testing"

	"github.com/amarjeetanandsingh/tgconst/parser"
)

// TODO:: to test it end to end: put testdata/data.go file in gen pkg.
var parsedFiles_taggedOnly = []parser.File{
	{
		PackageName: "pkgName",
		FileName:    "fileName.go",
		Structs: []parser.Struct{
			{ // magic commented struct
				Name: "MagicCommentStruct",
				Fields: []parser.Field{
					// {Name: "UntaggedField"}, tagged only
					{Name: "OneTagField", Tags: []parser.Tag{{"tagKey", "tagVal"}}},
					{Name: "TwoTagField", Tags: []parser.Tag{{"tag1Key", "tag1Val"}, {"tag2Key", "tag2Val"}}},
				},
			},
		},
	},
}

var generatedCode_taggedOnly = `// Code generated by tgconst; DO NOT EDIT.
package pkgName

const (

	// -------------------  File: fileName.go  -------------------
	// Struct: MagicCommentStruct
	MagicCommentStruct_OneTagField_tagKey  = "tagVal"
	MagicCommentStruct_TwoTagField_tag1Key = "tag1Val"
	MagicCommentStruct_TwoTagField_tag2Key = "tag2Val"
)
`

func TestGenerateAndWrite(t *testing.T) {

	parsedFile := parser.File{}
	parsedFile.PackageName = "pkgName"
	parsedFile.FileName = "FileName.go"
	parsedFile.Structs = []parser.Struct{
		{ // magic commented struct
			Name: "MagicCommentStruct",
			Fields: []parser.Field{
				{Name: "UntaggedField"},
				{Name: "OneTagField", Tags: []parser.Tag{{"tagKey", "tagVal"}}},
				{Name: "TwoTagField", Tags: []parser.Tag{{"tag1Key", "tag1Val"}, {"tag2Key", "tag2Val"}}},
			},
		},
	}

	writer := &bytes.Buffer{}
	parsedFiles := []parser.File{parsedFile}
	g := New()
	if err := g.generateAndWrite(parsedFiles, writer); err != nil {
		t.Errorf("error writing parsed value to writer:: %w", err)
	}

	//

}

// todo. create new parsedFile var.
func TestTaggedFieldOnly(t *testing.T) {
	g := New()
	g.onlyTaggedFields = true

	writer := &bytes.Buffer{}
	if err := g.generateAndWrite(parsedFiles_taggedOnly, writer); err != nil {
		t.Errorf("error in generateAndWrite. Error: %w", err)
	}
	output := writer.String()
	if strings.Contains(output, "UntaggedField") {
		t.Errorf("UntaggedField not expected")
	}
}

func TestTaggedOnly_AllowedTags(t *testing.T) {
	//g := New()
	//g.tags = []string{"tagKey"}
	//
	//writer := &bytes.Buffer{}
	//if err := g.generateAndWrite(parsedFiles_taggedOnly, writer); err != nil {
	//	t.Errorf("error in generateAndWrite. Error: %w", err)
	//}
	//got := writer.String()
	//if got != generatedCode_taggedOnly {
	//	t.Errorf("want: \n%s\n got : \n%s", generatedCode_taggedOnly, got)
	//}
}

func TestName(t *testing.T) {

}
